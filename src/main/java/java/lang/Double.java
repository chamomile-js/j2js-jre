/*
 * Copyright (c) 2006 j2js.com,
 *
 * All Rights Reserved. This work is distributed under the j2js Software License [1]
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * [1] http://www.j2js.com/license.txt
 */

package java.lang;

import javascript.ScriptHelper;
import javascript.Utils;

/**
 * The Double class wraps a value of the primitive type double in an object.
 * 
 * @author j2js.com
 */
public final class Double extends Number {

    public static final double NaN = ScriptHelper.evalDouble("Number.NaN");
    
    @SuppressWarnings("unchecked")
	public static final Class<Double> TYPE = (Class<Double>) double[].class.getComponentType();
    
    private double value;
    
    /**
     * Constructs a newly allocated Double object that represents the primitive double argument.
     */
    public Double(double d) {
        value = d;
    }

    /**
     * Constructs a newly allocated Double object that represents the floating-point value of type double represented by the string.    * @param s
     */
    public Double(String s) {
        value = parseDouble(s);
    }
    
    /**
     * Compares this object to the specified object.
     */
    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof Double)) return false;
        return ((Double) obj).value == value;
    }
    
    /**
     * Compares the two specified double values.
     */
    public int compareTo(Object o) {
        if (!(o instanceof Double)) throw new ClassCastException();
        Double d = (Double) o;
        if (isNaN() || d.isNaN()) {
            if (isNaN() && d.isNaN()) return 0;
            if (isNaN()) return 1;
            return -1;
        }
        return Utils.cmp(value, d.doubleValue(), 0);
    }
    
    public double doubleValue() {
        return value;
    }

    public float floatValue() {
        return (float) value;
    }

    public int intValue() {
        return (int) value;
    }

    public long longValue() {
        return (long) value;
    }
    
    /**
     * Returns true if this Double value is a Not-a-Number (NaN), false otherwise.
     */
    public boolean isNaN() {
        return isNaN(value);
    }
    
    /**
     * Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
     */
    public static boolean isNaN(double v) {
        ScriptHelper.put("value", v);
        return ScriptHelper.evalBoolean("isNaN(value)");
    }
    
    /**
     * Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.
     */
    public static double parseDouble(String s) throws NumberFormatException {
        if (s == null) throw new NullPointerException();
        s = s.trim();
        if (s.matches("(\\+|\\-)?NaN")) return NaN;
        
        if (!s.matches("(\\+|\\-)?\\d+(\\.\\d+)?")) throw new NumberFormatException("Invalid double: " + s);
        
        ScriptHelper.put("s", s);
        double d = ScriptHelper.evalDouble("parseFloat(s)");
        if (isNaN(d)) {
            throw new NumberFormatException("Not a parsable double: " + s);
        }
        return d;
    }
    
    /**
     * Returns an Double object holding the specified value. Calls to this
     * method may be generated by the autoboxing feature.
     */
    public static Double valueOf(double value) {
        return new Double(value);
    }
    
    /**
     * Returns a Double object holding the double value represented by the argument string s.
     */
    public static Double valueOf(String s) throws NumberFormatException {
        return new Double(parseDouble(s));
    }
    
    /**
     * Returns a string representation of this Double object.
     */
    public String toString() {
        ScriptHelper.put("value", value);
        return (String) ScriptHelper.eval("String(value)");
    }
    
}

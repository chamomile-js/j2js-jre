/*
 * Copyright (c) 2005 j2js.com,
 *
 * All Rights Reserved. This work is distributed under the j2js Software License [1]
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * [1] http://www.j2js.com/license.txt
 */

package java.lang;

import javascript.ScriptHelper;

/**
 * The Integer class wraps a value of the primitive type int in an object. An
 * object of type Integer contains a single field whose type is int.
 * 
 * @author j2js.com
 */
public class Integer extends Number {

	/**
	 * A constant holding the minimum value an {@code int} can
	 * have, -2<sup>31</sup>.
	 */
	public static int MAX_VALUE = 0x7fffffff;

	/**
	 * A constant holding the maximum value an {@code int} can
	 * have, 2<sup>31</sup>-1.
	 */
	public static int MIN_VALUE = 0x80000000;

	/**
	 * The {@code Class} instance representing the primitive type
	 * {@code int}.
	 *
	 * @since JDK1.1
	 */
	@SuppressWarnings("unchecked")
	public static final Class<Integer> TYPE = (java.lang.Class<Integer>) int[].class.getComponentType();

	private int value;

	/**
	 * Constructs a newly allocated Integer object that represents the specified
	 * int value.
	 */
	public Integer(int newValue) {
		value = newValue;
	}

	/**
	 * Compares this object to the specified object.
	 */
	public boolean equals(Object obj) {
		if (obj == null || !(obj instanceof Integer))
			return false;
		return ((Integer) obj).value == value;
	}

	/**
	 * Returns a string representation of the first argument in the radix
	 * specified by the second argument.
	 */
	public static String toString(int i, int radix) {
		ScriptHelper.put("i", i);
		ScriptHelper.put("radix", radix);
		return (String) ScriptHelper.eval("new Number(i).toString(radix)");
	}

	/**
	 * Returns a string representation of the integer argument as an unsigned
	 * integer in base 16.
	 */
	public static String toHexString(int i) {
		return toString(i, 16);
	}

	/**
	 * Returns a string representation of the integer argument as an unsigned
	 * integer in base 8.
	 */
	public static String toOctalString(int i) {
		return toString(i, 8);
	}

	/**
	 * Returns a string representation of the integer argument as an unsigned
	 * integer in base 2.
	 */
	public static String toBinaryString(int i) {
		return toString(i, 2);
	}

	/**
	 * Returns a String object representing the specified integer.
	 */
	public static String toString(int i) {
		return toString(i, 10);
	}

	/**
	 * Parses the string argument as a signed integer in the radix specified by
	 * the second argument.
	 */
	public static int parseInt(String s, int radix) {
		if (s == null)
			throw new NullPointerException();
		s = s.trim();
		// if (!s.matches("-?(\\d[A-Z])+")) throw new
		// NumberFormatException("Invalid integer: " + s);
		ScriptHelper.put("s", s);
		ScriptHelper.put("radix", radix);
		int i = ScriptHelper.evalInt("parseInt(s, radix)");

		ScriptHelper.put("i", i);
		ScriptHelper.put("radix", radix);
		if (!s.equals(ScriptHelper.eval("new Number(i).toString(radix)")))
			throw new NumberFormatException("Invalid integer: " + s);

		return i;
	}

	/**
	 * Parses the string argument as a signed decimal integer.
	 */
	public static int parseInt(String s) {
		return parseInt(s, 10);
	}

	/**
	 * Returns an Integer object holding the specified value. Calls to this
	 * method may be generated by the autoboxing feature.
	 */
	public static Integer valueOf(int value) {
		return new Integer(value);
	}

	/**
	 * Returns an Integer object holding the value extracted from the specified
	 * String when parsed with the radix given by the second argument.
	 */
	public static Integer valueOf(String s, int radix) {
		return new Integer(parseInt(s, radix));
	}

	/**
	 * Returns an Integer object holding the value of the specified String.
	 */
	public static Integer valueOf(String s) {
		return new Integer(parseInt(s));
	}

	/**
	 * Returns the value of this Integer as a byte.
	 */
	public byte byteValue() {
		return (byte) value;
	}

	/**
	 * Returns the value of this Integer as a short.
	 */
	public short shortValue() {
		return (short) value;
	}

	/**
	 * Returns the value of this Integer as an int.
	 */
	public int intValue() {
		return value;
	}

	/**
	 * Returns the value of this Integer as a long.
	 */
	public long longValue() {
		return value;
	}

	/**
	 * Returns the value of this Integer as a float.
	 */
	public float floatValue() {
		return value;
	}

	/**
	 * Returns the value of this Integer as a double.
	 */
	public double doubleValue() {
		return value;
	}

	/**
	 * Returns a String object representing this Integer's value.
	 */
	public String toString() {
		return Integer.toString(value, 10);
	}

	/**
	 * Returns a hash code for this Integer.
	 */
	public int hashCode() {
		return value;
	}

}
